#+title: Spookfox
#+tagline: Tinkerer's bridge between Emacs and Web Browsers
#+id: spookfox
#+source_code: https://github.com/bitspook/spookfox
#+issue_tracker: https://github.com/bitspook/spookfox/issues
#+languages: ["Emacs Lisp", "TypeScript", "Nix"]
#+updated_at: [2023-02-28 Tue]

#+name: oracle-spec
#+begin_src lisp :exports none
  (("an explorer"
    ("see it all" (:show :all))
    ("know more about Spookfox" (:show ("#explore"))))
   ("a developer"
    ("install Spookfox" (:show ("#outline-container-install")))
    ("use Spookfox" (:show ("#outline-container-use" "#outline-container-apps")))
    ("hack on Spookfox" (:show ("#outline-container-contribute")))))
#+end_src

#+name: saunf-claims
#+begin_src elisp :exports none
  (defun spookfox-uses-websockets ()
    (error "Not implemented."))

  (defun spookfox-has-linked-org-tabs-app ()
    (error "Not implemented."))

  (add-to-list '*saunf-claims* #'spookfox-uses-websockets)
  (add-to-list '*saunf-claims* #'spookfox-has-linked-org-tabs-app)
#+end_src

#+begin_src elisp :exports results :results none
  (defun spook--command-docs (file)
    "Return documentaiton for commands exported in FILE.
  A command is an `interactive' emacs-lisp function."
    (let  ((symbols (let ((file (expand-file-name file)))
                      (load-file file)
                      (alist-get file load-history nil nil 'equal)))
           (docs))
      (dolist (sym symbols)
        (when-let (((consp sym))
                   (func (cdr sym))
                   ((commandp func)))
          (push
           (format "- =%s=\n\n%s" func
                   (string-join
                    (mapcar
                     (lambda (s) (format "\t%s" s))
                     (string-lines (documentation func)))
                    "\n"))
           docs)))
      (string-join docs "\n")))

  (defmacro spook--func-doc (function-name)
    "Return documentation for FUNCTION-NAME.
    Returned string contain the function's name."
    `(format "- =%s=\n\n%s"
             (quote ,function-name)
             (string-replace
              "~/Documents/work/" ""
              (string-join
               (mapcar (lambda (s) (format "\t%s" s))
                       (string-lines (describe-function (function ,function-name))))
               "\n"))))
#+end_src

Spookfox is a Browser extension and an Emacs package, which allow Emacs and
Browser to communicate with each other. Its primary goal is to offer an Emacs
tinkerer similar (to Emacs) framework to tinker their browser.

I use Spookfox as my daily driver to enable a number of [[https://github.com/bitspook/spookmax.d][workflow enhancements]],
e.g capturing articles I read and Youtube videos I watch.

**Supported browsers**
1. Firefox
2. Chromium (thanks to [[https://github.com/kajalelohai][@kajalelohai]]) (but can you run it? Check [[#install][installation]]
   below)

** Installation
:PROPERTIES:
:CUSTOM_ID: install
:ID:       33c615ac-a136-4766-9fd8-481e3149b43b
:END:

There are 2 parts to install spookfox.

1. Install the browser addon

   Download the addon (=.xpi= file for Firefox) from [[https://github.com/bitspook/spookfox/releases/][releases page]]. Browser will
   prompt you to install as soon as you download it.

   *What is it not available on Browser addons page?*

   Because it is not [[https://addons.mozilla.org/en-US/firefox/addon/spookfox/][approved on Firefox addons]] yet.

   #+begin_quote
   ⚠️ Caution: Although Chromium is supported and a .crx file is generated in the
   releases, Chrome won't let you install and use it. Stop using Chrome. PS
   You'll have to drag-n-drop the downloaded crx file to Chrome to even install
   it, because Google. You will probably need to clone this repo, run =yarn
   build=, and [[https://developer.chrome.com/docs/extensions/mv3/getstarted/development-basics/#load-unpacked][load unpacked extension]] to run Spookfox in Chrome.
   #+end_quote

2. Install Emacs package

   - Using straight.el

     #+begin_src elisp :eval never-export
       (use-package spookfox
         :straight
         (spookfox :type git
                   :host github
                   :repo "bitspook/spookfox"
                   :files ("lisp/*.el" "lisp/apps/*.el"))
         :config
         (spookfox-init))
     #+end_src

   - Manually

     - Clone this repository

       #+begin_src sh
         git clone https://github.com/bitspook/spookfox <path-to-spookfox>
       #+end_src

       #+RESULTS:

     - Add spookfox and its apps =load-path=

       #+begin_src elisp :eval never-export
         (add-to-list 'load-path "<path-to-spookfox>/lisp")
         (add-to-list 'load-path "<path-to-spookfox>/lisp/apps")
       #+end_src

** Usage
:PROPERTIES:
:CUSTOM_ID: use
:ID:       5242966e-58fb-4744-8349-c63773861934
:END:

Spookfox itself is a thin layer which [[saunf-claim:spookfox-uses-websockets][provide websockets based communication]]
between Emacs and Browser. More functionality on top of it is provided with
[[id:7c11ffa6-701d-48a0-ac3c-b839fd210951][apps]]. Different apps need to be configured as documented in [[id:7c11ffa6-701d-48a0-ac3c-b839fd210951][apps]] section below.

1. *Load the apps you want to use*

   If you followed the [[#install][installation]] instructions, all apps bundled with the
   package itself should be ready to be loaded with a call to =require=. For
   example, to load "[[saunf-claim:spookfox-has-linked-org-tabs-app][spookfox-org-tabs]]" app, you'd write this Elisp:

   #+begin_src elisp :eval never-export
     (require 'spookfox-tabs)
   #+end_src

2. *Tell spookfox which apps you want to enable*

   Provide the list of enabled apps to =spookfox-enabled-apps= variable:

   #+begin_src elisp :eval never-export
     (setq spookfox-enabled-apps '(spookfox-org-tabs))
   #+end_src

3. *Initialize spookfox*

   Changes to =spookfox-enabled-apps= take effect when =spookfox-init= function
   is called. This function also starts the websockets server.

   #+begin_src elisp :eval never-export
     (spookfox-init)
   #+end_src

4. *Register custom request handlers*

   It is possible to send custom events from browser (e.g using a JavaScript
   bookmarklet), and run elisp code to handle them. For this you need to do 2
   things:

   1. Add a handle for request in Emacs

      Here is some example code for registering a request handler:

      #+begin_src elisp
        (defun my--capture-the-flag (url)
          (message "CAPTURING THE FLAG: %s" url))

        (spookfox--register-req-handler "CAPTURE_THE_FLAG" #'my--capture-the-flag)
      #+end_src

   2. Send a request from browser

      #+begin_src js
        postMessage({
          type: 'SPOOKFOX_RELAY_TO_EMACS',
          action: {
            name: 'CAPTURE_THE_FLAG',
            payload: { url: window.location.href }
          }
        })
      #+end_src

      =action= part here decides which request handler will execute. Elisp
      version of =payload= will be provided to your request-handler as an
      argument.

** Apps
:PROPERTIES:
:ID:       7c11ffa6-701d-48a0-ac3c-b839fd210951
:CUSTOM_ID: apps
:END:

Spookfox has a modular architecture. An "app" is a bundle of functionality
isolated and opt-in. Following apps come bundled with this package.

#+begin_export html
<style>[role=doc-toc] li { margin-left: 2rem; }</style>
#+end_export

#+TOC: headlines 2 local

*** spookfox-tabs
:PROPERTIES:
:CUSTOM_ID: spookfox-tabs-app
:END:

Basic access to browser's tabs.

**** Features
:PROPERTIES:
:CUSTOM_ID: spookfox-tabs-features
:END:

1. Access browser tabs in Elisp

   You can use this to enhance your Emacs usage. For example, check [[https://github.com/bitspook/spookmax.d/blob/aae6c47e5def0f2bc113f22931ec27c62b5365b6/readme.org?plain=1#L1647-L1664][my Emacs config]] to
   see how I use it to more easily capture notes for articles I read in the browser.

2. Commands for manipulating tabs

   #+name: Commands exported by spookfox-tabs
   #+begin_src elisp :exports results :results raw
     (spook--command-docs "~/Documents/work/spookfox/lisp/apps/spookfox-tabs.el")
   #+end_src

*** js-injection
:PROPERTIES:
:CUSTOM_ID: js-injection-app
:END:

Inject Javascript into the browser. From a web extension's pov, there are three
places to inject JS in:

1. The [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Background_scripts][background script]]; which can be considered *the addon* itself.
2. The [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts][content script]]; which runs inside a web-page e.g on youtube.com
3. The [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Popups][popup]]; which runs in addon's popup-ui page. This is the popup you see
   when you click the addon's icon in top browser bar.

This app provide following functions:

#+begin_src elisp :exports results :results raw
  (spook--func-doc spookfox-eval-js-in-active-tab)
#+end_src

  Inject Javascript into any website open in your browser's active tab, and get
  the results back. I use it to help me take notes for Youtube videos with
  automatically added timestamp links.

#+begin_src elisp :exports results :results raw
  (spook--func-doc spookfox-js-injection-eval)
#+end_src

*** jscl
:PROPERTIES:
:CUSTOM_ID: jscl-app
:END:

Spookfox ships [[https://github.com/jscl-project/jscl][JSCL]] compiler, which can be used to run a subset of common-lisp
in the browser. For example:

#+begin_src emacs-lisp :exports code
  (sfcl-eval
     `(progn
        (js:browser:tabs:update ,tab-id ,(sfcl-js-obj '(("active" . t))))
        (js:browser:windows:update ,window-id ,(sfcl-js-obj '(("focused" . t))))
        t))
#+end_src

[[https://github.com/bitspook/spookfox/blob/fde29fcb95e1f7cfba52bcfa31417d3b2f6dbfb0/lisp/apps/spookfox-tabs.el#L66-L70][spookfox-tabs.el use jscl]] for [[https://github.com/bitspook/spookfox/blob/fde29fcb95e1f7cfba52bcfa31417d3b2f6dbfb0/lisp/apps/spookfox-tabs.el#L49][spookfox-switch-tab]]

Following functions are available:

#+begin_src elisp :exports results :results raw
  (spook--func-doc spookfox-jscl-eval)
#+end_src

To make it a little easier to work with JS from CL, following utility functions
can be used:

#+begin_src elisp :exports results :results raw
  (spook--func-doc spookfox-jscl-js-obj)
#+end_src

*** spookfox-org-tabs
:PROPERTIES:
:CUSTOM_ID: spookfox-org-tabs-app
:END:

#+begin_quote
⚠️ I am not using this app myself anymore. It is the most buggy of 'em all. I am
keeping it around because list of my open tabs is increasing again, and I might
once again need this.
#+end_quote

Manage browser's tabs in an org file (separate file or as a subtree in an
existing one).

**** Features
:PROPERTIES:
:CUSTOM_ID: spookfox-org-tabs-features
:END:

1. Organize tabs freely in org file

   Tabs are stored as org-mode subtrees, which you are free to structure as you
   desire. You can *group tabs* by assigning org-mode tags, to manipulate tabs
   (open, close) in bulk.

2. *Chain tabs*, so any changes to the tab in Browser (e.g url change) are
   synced with the org-file

3. Commands for manipulating tabs

   #+name: Exported Commands
   #+begin_src elisp :exports results :results raw
     (spook--command-docs "~/Documents/work/spookfox/lisp/apps/spookfox-org-tabs.el")
   #+end_src

**** Configuration
:PROPERTIES:
:CUSTOM_ID: spookfox-org-tabs-config
:END:

1. =spookfox-saved-tabs-target=

   =spookfox-saved-tabs-target= is an [[https://orgmode.org/manual/Template-elements.html][org-capture-templates target]], where the
   browser tabs are saved. For example:

   #+begin_src elisp :eval never-export
     ;; Store tabs in a file named =spookfox.org=, under '* Tabs' heading
     (setq spookfox-saved-tabs-target
           `(file+headline
             ,(expand-file-name "spookfox.org" org-directory)
             "Tabs"))
   #+end_src

** Contribute
:PROPERTIES:
:CUSTOM_ID: contribute
:END:

1. Write apps

   If you want to write apps for Spookfox to handle a use-case not covered by
   existing apps, for now you need to go through [[https://github.com/bitspook/spookfox][the source code]] to figure
   things out. I am still working on a web-accessible documentation for
   Spookfox. Code is allegedly well-commented and existing apps can act as good
   examples.

2. Modify Spookfox

   To make changes on the Browser side of things, you'll have to modify and
   rebuild the browser addon itself. Unfortunately browsers don't allow
   injecting code into the running addon anymore (although it is possible to
   inject code into a website).

   Or you might want to fix a bug, or make the code cleaner.

   Please take a look at the [[https://github.com/bitspook/spookfox/blob/master/contributing.org][contributing.org]] for setting up the development
   environment to hack Spookfox.
