<?xml version="1.0" encoding="UTF-8"?><feed xlmns="http://www.w3.org/2005/Atom"><title type="text">Workflow - bitspook.in</title><id>https://bitspook.in/tags/workflow/feed.xml</id><updated>2023-12-30T16:29:28.225165Z</updated><link href="https://bitspook.in/tags/workflow/feed.xml" rel="self" title="Workflow"/><author type="text">Charanjit Singh</author><subtitle type="text"></subtitle><logo>https://bitspook.in/images/avatar.png</logo><entry><title type="text">Reading, and not forgetting</title><id>https://bitspook.in/blog/reading-and-not-forgetting</id><updated>2023-01-15T19:46:00.000000Z</updated><link href="https://bitspook.in/blog/reading-and-not-forgetting" title="Reading, and not forgetting"/><author type="text">Charanjit Singh</author><category term="blog"/><published>2023-01-15T19:46:00.000000Z</published><summary type="text"></summary><content type="html">&lt;div id=&quot;outline-container-org51a5646&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org51a5646&quot;&gt;Problem&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org51a5646&quot;&gt;
&lt;p&gt;
I forget everything I read, as soon as I am done reading (a sentence). Over
time, reading turned from leisure to labor. Pressure of having to remember
things took the fun out of reading. Small attention span and easily getting
distracted made it even worse.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org43762c1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org43762c1&quot;&gt;Solution&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org43762c1&quot;&gt;
&lt;p&gt;
Take notes to outsource remembering, and make reading more engaging.
&lt;/p&gt;

&lt;p&gt;
Creating well-organized notes take the burden of remembering away. The act of
taking notes keep my attention tethered.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgddab57f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgddab57f&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgddab57f&quot;&gt;
&lt;p&gt;
Note taking process need to be designed to reduce the burden that note-taking
itself can become. Key here is not taking notes, it is crafting a smooth
note-taking workflow.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8e0b554&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org8e0b554&quot;&gt;Components&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org8e0b554&quot;&gt;
&lt;p&gt;
My reading workflow involves 3 major components
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;li&gt;Denote, an Emacs package for managing notes&lt;/li&gt;
&lt;li&gt;Spookfox: An Emacs package for controlling Firefox from Emacs&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4dafec0&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org4dafec0&quot;&gt;Emacs&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org4dafec0&quot;&gt;
&lt;p&gt;
Emacs is the center stage on which everything else plays. I chose Emacs, because
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;It is where I spend most time on my computer&lt;/li&gt;
&lt;li&gt;I am very comfortable hacking on it, so tuning things to make my workflow
smoother is an already acquired habit.&lt;/li&gt;
&lt;li&gt;I already have a thriving documenting system/workflow in Emacs. I have to
externalize a lot of my mind, for which I've been using Emacs for over a
decade now.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org64a1cb5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org64a1cb5&quot;&gt;Denote&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org64a1cb5&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/protesilaos/denote&quot;&gt;Denote&lt;/a&gt; is my present choice of note-taking Emacs package. It provide structure
to my notes, and thin tooling to navigate this structure. Notes are kept in
&lt;code&gt;&amp;lt;timestamp&amp;gt;-&amp;lt;slug&amp;gt;__&amp;lt;tags&amp;gt;.org&lt;/code&gt; format. This makes it easy to find a note by
keywords and tags even from outside Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf3f9d8e&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf3f9d8e&quot;&gt;Spookfox&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgf3f9d8e&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/bitspook/spookfox&quot;&gt;Spookfox&lt;/a&gt; is my answer to &amp;quot;but what about when you need to leave Emacs?&amp;quot;.
&lt;/p&gt;

&lt;p&gt;
I consume most of the educational content on the web, that usually means
Firefox. I built myself a small system (Spookfox) to make Emacs speak with
Firefox.
&lt;/p&gt;

&lt;p&gt;
It is sort of a launch-pad for quickly creating Firefox addons which talk to
Emacs. Most commonly I use it for accessing content I have in browser, e.g
getting information about current browser tab, video being played etc.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf83c717&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf83c717&quot;&gt;The workflow&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgf83c717&quot;&gt;
&lt;p&gt;
It boils down to a single key-combo: &lt;code&gt;C-c n r&lt;/code&gt; open a &amp;quot;reading note&amp;quot; in my
scratchpad. &lt;code&gt;C-c n r&lt;/code&gt; opens the same note regardless of when I open it; i.e it
don't re-create a new note every time. This is super useful when you are blessed
with the combo of laziness and forgetfulness.
&lt;/p&gt;

&lt;p&gt;
Scratchpad is a mechanism for quickly launching an Emacs window for capturing
some information. This usually means bringing an Emacs window to focus with a
keypress.
&lt;/p&gt;

&lt;p&gt;
A reading note is a note which has
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;code&gt;reading&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;source&lt;/code&gt; property, which is 95% of the times the web URL (from Firefox)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;code&gt;reading&lt;/code&gt; subdirectory in my notes
&lt;/p&gt;

&lt;p&gt;
It seems redundant given that there is already a &lt;code&gt;reading&lt;/code&gt; tag, but I keep it
not for categorizing the notes but to keep them out of my normal
notes-search.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
My &amp;quot;normal&amp;quot; notes are conceptual, they come from different sources and are
essence of my understanding from different sources. My reading notes &lt;b&gt;are&lt;/b&gt; these
sources.
&lt;/p&gt;

&lt;p&gt;
&amp;quot;Reading&amp;quot; notes free me up to not worry about the structure of the notes I am
taking or its impact on other notes. After taking the &amp;quot;reading&amp;quot; notes, I review
them and move appropriate parts (or summary/rephrase) them in my &amp;quot;normal&amp;quot;
note(s), while linking back to the reading note.
&lt;/p&gt;

&lt;p&gt;
This create a neat web of sources and concepts. I get to be free from the burden
of keeping track of where the knowledge in my notes is coming from. When I need
to track something back to its source, I get nice hand-drafted summary of the
original source.
&lt;/p&gt;

&lt;p&gt;
With Spookfox I extend this workflow to (Youtube) videos as well. In addition to
automatically opening the note, I have &lt;a href=&quot;https://github.com/bitspook/spookmax.d/blame/7f5f0fbde3777662d2d2fb2baefc18a71c012855/readme.org#L1528-L1610&quot;&gt;Emacs configured to insert video
timestamps with my notes&lt;/a&gt;. This essentially annotate Youtube videos, and have
come super handy recently in my German language study.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="text">How I manage my passwords</title><id>https://bitspook.in/blog/how-i-manage-my-passwords</id><updated>2022-09-19T00:00:00.000000Z</updated><link href="https://bitspook.in/blog/how-i-manage-my-passwords" title="How I manage my passwords"/><author type="text">Charanjit Singh</author><category term="blog"/><published>2022-09-19T00:00:00.000000Z</published><summary type="text"></summary><content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/faFJzaAjy0E&quot; title=&quot;tldr; video&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;div id=&quot;outline-container-org0081edc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0081edc&quot;&gt;My requirements&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0081edc&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;No third-parties&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I don't want to put my trust in any third party. Be it Google/Mozilla (via
saved passwords in browser), or some dedicated password manager like KeyPass.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;b&gt;Simplicity&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Simple tools are easier to understand and bend to my will. It also means I'll
be able to intervene when something goes wrong.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;b&gt;Composability&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I should be able to make the tool a part of my forever changing workflow. It
should play nice with presence/absence of other tools.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org999b18b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org999b18b&quot;&gt;Tools I chose&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org999b18b&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;http://www.passwordstore.org/&quot;&gt;Pass&lt;/a&gt; - &lt;i&gt;The simple password manager&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
I think it is as simple as it gets. A password-store in pass is a git repo
(so a directory) which contains gpg encrypted files. Each file represent one
set of credentials, and can contain all the plain-text, not just password and
username. E.g I often end up storing recovery codes for accounts in these.
&lt;/p&gt;

&lt;p&gt;
There are no third-parties involved, encryption happens on my machine, and I
can store my password store anywhere I want (e.g a private git repo on
github).
&lt;/p&gt;

&lt;p&gt;
Most pass operations are convenience wrappers on basic operations provided by
other tools; e.g &lt;code&gt;edit = decrypting a file + open it in an editor +
   re-encrypting + git-commit&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Pass has a whole ecosystem of tools written around it, which makes it an easy
choice considering how much work it saves me when integrating it in my
workflow.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;https://github.com/carnager/rofi-pass&quot;&gt;rofi-pass&lt;/a&gt; - &lt;i&gt;Rofi-based UI for pass for desktop&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/davatorium/rofi&quot;&gt;Rofi&lt;/a&gt; is a lightweight popup choice-selection UI, which has so far worked
out-of-the-box on all window-managers I have used. &lt;i&gt;rofi-pass&lt;/i&gt; extends rofi
with:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Ability to search and select credentials stored in pass&lt;/li&gt;
&lt;li&gt;Auto-fill credentials into any GUI app&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;https://github.com/bitspook/fireword&quot;&gt;fireword&lt;/a&gt; - &lt;i&gt;Converting easy-to-remember passwords to hard-to-crack ones&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
Not all credentials need to be saved. Occasionally I need to create
&lt;i&gt;throwaway&lt;/i&gt; accounts, for which I like to keep easy-to-guess (for me)
passwords. But I want even these password to be opaque (so analyzing them
wouldn't reveal a theme of my throwaway passwords).
&lt;/p&gt;

&lt;p&gt;
Fireword is a small script I wrote many years ago which create insane
passwords from any string. Even a single change of character in a string
creates wildly different output. So instead of passing a plain easy-to-guess
password, I give them to fireword and use its output.
&lt;/p&gt;

&lt;p&gt;
For example, &lt;code&gt;pass&lt;/code&gt; becomes &lt;code&gt;5B72?[30:F&lt;/code&gt; but &lt;code&gt;passs&lt;/code&gt; is &lt;code&gt;3Ec012aD5(&lt;/code&gt;.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;https://github.com/android-password-store/Android-Password-Store#readme&quot;&gt;Android Password Store&lt;/a&gt; - Android app for accessing pass
&lt;/p&gt;

&lt;p&gt;
Password store on android allows using the passwords I create/edit on my
desktop on my mobile and tablet. I use &lt;a href=&quot;https://syncthing.net/&quot;&gt;syncthing&lt;/a&gt; to sync my password store to
my mobile devices.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org806b57e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org806b57e&quot;&gt;Workflow&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org806b57e&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfb9ae9d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgfb9ae9d&quot;&gt;Add/edit/delete a password&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgfb9ae9d&quot;&gt;
&lt;p&gt;
For all these operations, I use the &lt;code&gt;pass&lt;/code&gt; cli. It is simple and intuitive, and
mostly just delegates to other Linux utilities. For example, deleting a password
for &lt;i&gt;my-acc&lt;/i&gt; account in &lt;i&gt;example.com&lt;/i&gt; is &lt;code&gt;pass rm example.com/my-acc&lt;/code&gt;; and
deleting all accounts in &lt;i&gt;example.com&lt;/i&gt; is &lt;code&gt;pass rm -r example.com&lt;/code&gt;.
&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/videos/how-i-manage-my-passwords/1--pass-cli.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;

&lt;p&gt;
I used to use &lt;code&gt;pass generate&lt;/code&gt; for creating new passwords, which creates cryptic
hard (impossible?) to crack strings. Over time however, I have come to prefer
password phrases which are easy to type by hand. I pick 3-4 words that come to
my mind at a time, and make a loose sentence out of them to create a new
password. For example &lt;code&gt;libauvutilcelingfan&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8de46db&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org8de46db&quot;&gt;Using a password&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org8de46db&quot;&gt;
&lt;p&gt;
Using &lt;code&gt;pass&lt;/code&gt; CLI for using a password gets tedious quickly. Using a password is
much more common than adding/editing/deleting one. So I use &lt;i&gt;rofi-pass&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
It gives me a nice prompt to search and select the credentials I want, and
autofills them. It is smart enough to recognize that credentials are more than
just a password; so if you edit your password file to look like:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-text&quot;&gt;mypassword

user: myuser
some-other-key: some-val
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;i&gt;rofi-pass&lt;/i&gt; will allow you to select the key and auto-type its value. It
recognizes first line as the password, and a value with &lt;code&gt;user&lt;/code&gt; key to autotype
both username and password in forms which ask for first username and then
password (on the same form).
&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/videos/how-i-manage-my-passwords/2--using-rofi-pass.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org93830a7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org93830a7&quot;&gt;Throwaway passwords&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org93830a7&quot;&gt;
&lt;p&gt;
I don't &amp;quot;install&amp;quot; fireword since it is just a self-contained python script. But
because throwaway passwords, although temporary, tend to be entered frequently
(private browsing), I have created a small command in &lt;a href=&quot;https://github.com/bitspook/stumpwm.d&quot;&gt;my stumpwm configuration&lt;/a&gt;
to make it easy.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #598bc1;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #b6b635;&quot;&gt;spook/fireword-bin&lt;/span&gt; &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;~/Documents/work/fireword/fireword&amp;quot;&lt;/span&gt;)

(defcommand fireword (pass len)
  ((&lt;span style=&quot;color: #7f7dca;&quot;&gt;:password&lt;/span&gt; &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;Password: &amp;quot;&lt;/span&gt;)
   (&lt;span style=&quot;color: #7f7dca;&quot;&gt;:password&lt;/span&gt; &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;Length: &amp;quot;&lt;/span&gt;))
  (run-shell-command (format nil  &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;~a ~a ~a | xclip -sel clip&amp;quot;&lt;/span&gt; spook/fireword-bin pass len)))

(&lt;span style=&quot;color: #598bc1;&quot;&gt;define-key&lt;/span&gt; *top-map* (kbd &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;s-P&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;fireword&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
In the end I get a nice prompt on pressing &lt;code&gt;C-P&lt;/code&gt; to enter my password and
desired length, get the fireword copied to clipboard which I then paste in a
private browser window.
&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/videos/how-i-manage-my-passwords/3-using-fireword-with-stumpwm.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="text">Using org-mode as an SQL playground</title><id>https://bitspook.in/blog/using-org-mode-as-an-sql-playground</id><updated>2022-02-03T00:00:00.000000Z</updated><link href="https://bitspook.in/blog/using-org-mode-as-an-sql-playground" title="Using org-mode as an SQL playground"/><author type="text">Charanjit Singh</author><category term="blog"/><published>2022-02-03T00:00:00.000000Z</published><summary type="text"></summary><content type="html">&lt;p&gt;
Showcase video:
&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DY7t4T4TmUU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;
For every web app I work on, a database client is always present for exploring
data and building complex queries. Recently, I have moved on from my PgAdmin to
org-mode for this purpose, because why not.
&lt;/p&gt;

&lt;p&gt;
Org-mode allows executing code snippets and can show results in a nice tabular
form. But org-mode isn't &lt;a href=&quot;https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-320/Microsoft-Office.html&quot;&gt;written by Microsoft&lt;/a&gt;. So it don't allow arbitrary code
execution without our explicit consent. To tell org-mode that it is okay to
execute SQL snippets, we need to run following elisp snippet:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #598bc1;&quot;&gt;with-eval-after-load&lt;/span&gt; 'org
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Org-mode has a number of &lt;a href=&quot;https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html#org7f0941b&quot;&gt;header arguments for SQL blocks&lt;/a&gt; which can be used to
configure how a particular SQL source-code snippet is executed. Most important
ones perhaps are:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;:engine&lt;/code&gt; which tells which database to run the SQL against&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dbhost&lt;/code&gt; to configure the database host, most likely &lt;code&gt;localhost&lt;/code&gt; for a dev
environment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dbport&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dbuser&lt;/code&gt; and &lt;code&gt;:dbpassword&lt;/code&gt; for database authentication&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:database&lt;/code&gt; for database name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
By default org-mode runs the code snippets in current OS environment. I use this
fact to get the ability to run SQL against our postgres database without passing
most of the above arguments. Postgres allows setting &lt;a href=&quot;https://www.postgresql.org/docs/current/libpq-envars.html&quot;&gt;some environment&lt;/a&gt; variables,
which it then use to for making connections by default. In my &lt;a href=&quot;https://github.com/bitspook/entropy/blob/ae5ee52646c2c67ce713938548d67a722b73a294/flake.nix&quot;&gt;flake.nix&lt;/a&gt; file, I
setup the required environment variables:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #b6b635;&quot;&gt;PGDIR&lt;/span&gt;=$&lt;span style=&quot;color: #b6b635;&quot;&gt;PWD&lt;/span&gt;/storage/postgres
&lt;span style=&quot;color: #7f7dca;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #b6b635;&quot;&gt;PGDATA&lt;/span&gt;=$&lt;span style=&quot;color: #b6b635;&quot;&gt;PGDIR&lt;/span&gt;/data
&lt;span style=&quot;color: #7f7dca;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #b6b635;&quot;&gt;PGHOST&lt;/span&gt;=$&lt;span style=&quot;color: #b6b635;&quot;&gt;PGDIR&lt;/span&gt;/run
&lt;span style=&quot;color: #7f7dca;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #b6b635;&quot;&gt;PGDATABASE&lt;/span&gt;=entropy
&lt;span style=&quot;color: #7f7dca;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #b6b635;&quot;&gt;DATABASE_URL&lt;/span&gt;=&lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;postgresql:///$PGDATABASE?host=$PGHOST&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #858585; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #858585; font-style: italic;&quot;&gt;not required by postgres, but will be helpful&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
With this, only header option left to set is &lt;code&gt;:engine&lt;/code&gt;, which I prefer to
configure globally for my &lt;a href=&quot;https://raw.githubusercontent.com/bitspook/entropy/96cc9c0485d972ed819996d61c3730cafb228660/sql-playground.org&quot;&gt;sql-playground.org&lt;/a&gt; since I usually have one database
for my personal projects. You can check this &lt;a href=&quot;https://github.com/bitspook/entropy/commit/96cc9c0485d972ed819996d61c3730cafb228660&quot;&gt;commit on Entropy project&lt;/a&gt; for how I
have setup my sql-playground there. Following snippet on top of the
sql-playground.org does the trick:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #858585; font-style: italic;&quot;&gt;#+PROPERTY: header-args:sql  :engine postgres&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now any SQL snippets that we create can be executed against our development
database right within the org file. For example, pressing &lt;code&gt;C-c C-c&lt;/code&gt; in following
SQL block produces output shown below that.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #858585; font-style: italic;&quot;&gt;#+name: events&lt;/span&gt;
&lt;span style=&quot;color: #858585; font-style: italic; text-decoration: underline;&quot;&gt;#+begin_src sql&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #598bc1;&quot;&gt;SELECT&lt;/span&gt;&lt;span style=&quot;color: #aab0ab;&quot;&gt; events.title,&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;         events.slug,&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;         start_time,&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;         events.id,&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;         events.&lt;/span&gt;&lt;span style=&quot;color: #598bc1;&quot;&gt;source&lt;/span&gt;&lt;span style=&quot;color: #aab0ab;&quot;&gt;,&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;         format(&lt;/span&gt;&lt;span style=&quot;color: #6aaf50;&quot;&gt;'%s mins'&lt;/span&gt;&lt;span style=&quot;color: #aab0ab;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #7f7dca;&quot;&gt;extract&lt;/span&gt;&lt;span style=&quot;color: #aab0ab;&quot;&gt;(epoch &lt;/span&gt;&lt;span style=&quot;color: #598bc1;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #aab0ab;&quot;&gt; (events.end_time - events.start_time))/60)&lt;/span&gt;
&lt;span style=&quot;color: #aab0ab;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #598bc1;&quot;&gt;FROM&lt;/span&gt;&lt;span style=&quot;color: #aab0ab;&quot;&gt; events;&lt;/span&gt;
&lt;span style=&quot;color: #858585; font-style: italic; text-decoration: overline;&quot;&gt;#+end_src&lt;/span&gt;

&lt;span style=&quot;color: #858585; font-style: italic;&quot;&gt;#+RESULTS: events&lt;/span&gt;
&lt;span style=&quot;color: #86b5e8;&quot;&gt;| title              | slug                 | start_time          | end_time            | source | format  |&lt;/span&gt;
&lt;span style=&quot;color: #86b5e8;&quot;&gt;|--------------------+----------------------+---------------------+---------------------+--------+---------|&lt;/span&gt;
&lt;span style=&quot;color: #86b5e8;&quot;&gt;| Lol bro what       | lol-rofl-lmao        | 2021-11-29 12:30:00 | 2021-11-29 13:30:00 | local  | 60 mins |&lt;/span&gt;
&lt;span style=&quot;color: #86b5e8;&quot;&gt;| Nested event title | nested-lol-rofl-lmao | 2021-10-29 12:30:00 | 2021-10-29 13:30:00 | local  | 60 mins |&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb2d14b8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb2d14b8&quot;&gt;Utilizing LSP&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb2d14b8&quot;&gt;
&lt;p&gt;
Building SQL queries is my primary use-case, and org-mode configured so far
serves that purpose. But since I am putting all this effort in writing this blog
post anyway, I thought let's go a step further and try configuring LSP mode for
SQL snippets in my org file. To my surprise, it is possible. &lt;a href=&quot;https://github.com/lighttiger2505/sqls/&quot;&gt;SQLS&lt;/a&gt; provides an
LSP server for SQL files, which once configured can provide certain features
like auto-completing table and column names. I have created a &lt;a href=&quot;https://github.com/bitspook/entropy/blob/96cc9c0485d972ed819996d61c3730cafb228660/.dir-locals.el&quot;&gt;.dir-locals&lt;/a&gt; file
for &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html&quot;&gt;adding directory local variables&lt;/a&gt; to configure LSP to connect to correct
database.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;((nil . ((eval (&lt;span style=&quot;color: #598bc1;&quot;&gt;lambda&lt;/span&gt; ()
                 (&lt;span style=&quot;color: #598bc1;&quot;&gt;setq&lt;/span&gt; lsp-sqls-connections `(((driver . &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt;)
                                               (dataSourceName . ,(getenv &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;))))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This snippet isn't actually the right way configuring directory local variables,
becuase it sets &lt;code&gt;lsp-sqls-connections&lt;/code&gt; globally. This is the result of me
time-boxing the task of evaluating &lt;code&gt;(getenv &amp;quot;DATABASE_URL&amp;quot;)&lt;/code&gt;, so I won't need to
duplicate my database configuration here.
&lt;/p&gt;

&lt;p&gt;
LSP for org-mode also need to provide a file to which it can tangle source
blocks. So I added another snippet to top of my org file.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #858585; font-style: italic;&quot;&gt;#+PROPERTY: header-args:sql  :tangle test.sql&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I can now run &lt;code&gt;lsp-org&lt;/code&gt; in an SQL block, and 8/10 times it has lsp configured
properly. It isn't flawless though, but that is expected since &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/manual-language-docs/lsp-org/#&quot;&gt;lsp support in
org-snippets&lt;/a&gt; is in alpha stage right now.
&lt;/p&gt;

&lt;p&gt;
I also tried setting up lsp support in edit buffer for SQL statements (which you
get by pressing &lt;code&gt;C-c '&lt;/code&gt; in org src blocks), but because of a &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/issues/2525&quot;&gt;bug in lsp-mode&lt;/a&gt;,
that didn't work out too well.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #598bc1;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #1d9a79;&quot;&gt;org-babel-edit-prep:sql&lt;/span&gt; (babel-info)
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;setq-local&lt;/span&gt; buffer-file-name (&lt;span style=&quot;color: #598bc1;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; babel-info caddr (alist-get &lt;span style=&quot;color: #7f7dca;&quot;&gt;:tangle&lt;/span&gt;)))
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;setq-local&lt;/span&gt; lsp-buffer-uri (&lt;span style=&quot;color: #598bc1;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; babel-info caddr (alist-get &lt;span style=&quot;color: #7f7dca;&quot;&gt;:tangle&lt;/span&gt;) lsp--path-to-uri))
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;setq-local&lt;/span&gt; lsp-headerline-breadcrumb-enable nil)
  (lsp))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org137345d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org137345d&quot;&gt;Problems with this setup&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org137345d&quot;&gt;
&lt;p&gt;
There are 2 main problems I face during my primary use-case.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Org tables don't work well if a column has a lot of data. e.g &lt;code&gt;description&lt;/code&gt;
of an &lt;code&gt;event&lt;/code&gt; messes up the table real bad. lsp-mode allow executing queries
which don't suffer from this.&lt;/li&gt;
&lt;li&gt;No LSP support in edit buffer is a major bummer.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="text">Using org-roam as a CRM</title><id>https://bitspook.in/blog/using-org-roam-as-a-crm</id><updated>2022-01-22T00:00:00.000000Z</updated><link href="https://bitspook.in/blog/using-org-roam-as-a-crm" title="Using org-roam as a CRM"/><author type="text">Charanjit Singh</author><category term="blog"/><published>2022-01-22T00:00:00.000000Z</published><summary type="text"></summary><content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DteN5uBV5ts&quot; title=&quot;TLDR video&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;
org-roam is an Emacs application which makes efficiently capturing and finding
notes easy. It does so a good job at that, I decided to use it as a makeshift
personal CRM. With a few lines of Elisp, I get to:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
Take notes about people and events. I usually capture their contact
information, important dates, how they made me feel during our interactions.
Documenting meetings and calls has proven to be very helpful on more than one
occasion.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;SPC P f&lt;/code&gt; to very quickly find or create a person/event.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Link events and people to build a graph of relationships, which provide
context and help me remember our meetings vividly. It is valuable for me
because it save me from anxiety about forgetting people and things I discuss
with them.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;SPC P i&lt;/code&gt; to insert link to a person/event in an org file (mostly my diary).
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I have similar keybindings for taking (&lt;code&gt;SPC n f&lt;/code&gt;) and inserting notes (&lt;code&gt;SPC n
i&lt;/code&gt;), so it builds into a nice theme for easy-to-remember keybindings and
consistent UI.
&lt;/p&gt;
&lt;div id=&quot;outline-container-org817fa6c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org817fa6c&quot;&gt;Setup&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org817fa6c&quot;&gt;
&lt;p&gt;
Elisp I use org-roam as a CRM, while keeping &amp;quot;normal&amp;quot; org-roam available for
taking notes.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #598bc1;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #b6b635;&quot;&gt;spook--org-roam-crm-dir&lt;/span&gt; &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;~/Documents/org/people&amp;quot;&lt;/span&gt;
  &lt;span style=&quot;color: #987654;&quot;&gt;&amp;quot;Directory where org-roam notes related to people are kept.&amp;quot;&lt;/span&gt;)

(&lt;span style=&quot;color: #598bc1;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #1d9a79;&quot;&gt;spook--with-org-roam-crm&lt;/span&gt; (func &lt;span style=&quot;color: #d65946;&quot;&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style=&quot;color: #987654;&quot;&gt;&amp;quot;Evaluate FUNC with ARGS org-roam set for working as CRM.&amp;quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;let*&lt;/span&gt; ((org-roam-directory spook--org-roam-crm-dir)
         (org-roam-db-location (concat org-roam-directory &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;/roam.db&amp;quot;&lt;/span&gt;)))
    (apply func args)))

(&lt;span style=&quot;color: #598bc1;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #1d9a79;&quot;&gt;spook-crm--db-sync&lt;/span&gt; ()
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;interactive&lt;/span&gt;)
  (spook--with-org-roam-crm #'org-roam-db-sync))

(&lt;span style=&quot;color: #598bc1;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #1d9a79;&quot;&gt;spook-crm--find-person&lt;/span&gt; ()
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;interactive&lt;/span&gt;)
  (spook--with-org-roam-crm #'org-roam-node-find))

(&lt;span style=&quot;color: #598bc1;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #1d9a79;&quot;&gt;spook-crm--insert-person&lt;/span&gt; ()
  (&lt;span style=&quot;color: #598bc1;&quot;&gt;interactive&lt;/span&gt;)
  (spook--with-org-roam-crm #'org-roam-node-insert))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Setup keybindings for calling &lt;code&gt;spook-crm--find-person&lt;/code&gt; to quickly search for
(and/or add) a person or event, and &lt;code&gt;spook-crm--insert-person&lt;/code&gt; to add a link to
a person or event in any org-mode buffer. I frequently use it when adding
meeting notes and in my diary.
&lt;/p&gt;

&lt;p&gt;
Here's how I add the keybindings:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(spook-defkeymap
 &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;spook-people&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;C-c P&amp;quot;&lt;/span&gt;
 '(&lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; . spook-crm--find-person)
 '(&lt;span style=&quot;color: #6aaf50;&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; . spook-crm--insert-person))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can find source of my very naive &lt;code&gt;spook-defkeymap&lt;/code&gt; macro in my &lt;a href=&quot;https://github.com/bitspook/spookmax.d/blob/master/readme.org#helper-utilities&quot;&gt;Emacs
configuration&lt;/a&gt;. In addition to this, I assign the &lt;code&gt;spook-people&lt;/code&gt; keymap to my
&lt;a href=&quot;https://github.com/meow-edit/meow/&quot;&gt;meow&lt;/a&gt; leader key, means I can press &lt;code&gt;SPC P f&lt;/code&gt; to find a person/event, and &lt;code&gt;SPC P
i&lt;/code&gt; to insert a link to a person/event.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge495b4d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge495b4d&quot;&gt;Does it solve everything?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge495b4d&quot;&gt;
&lt;p&gt;
No. But it is the quickest solution which achieves satisfactory result and free
me up to focus on other things. I feel org-roam itself to be over-engineered
sometimes, and there are a bunch of things I might like but don't need right
now. e.g
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;More structured way of capturing specific kind of information. e.g contact
details. Structure of data kept in org files is upto me, which works for now&lt;/li&gt;
&lt;li&gt;Searching by something which isn't title or tags. This is solved by doing grep
over&lt;/li&gt;
&lt;li&gt;Visualize the people and events I participate in. &lt;a href=&quot;https://github.com/org-roam/org-roam-ui&quot;&gt;org-roam-ui&lt;/a&gt; didn't work on
first shot.&lt;/li&gt;
&lt;li&gt;Contacts/details on the go i.e a mobile app&lt;/li&gt;
&lt;li&gt;Psychoanalyze people I meet; building, tracking and concluding experiments.
But it is perhaps too much to ask without making effort&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2195e23&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2195e23&quot;&gt;Why am I sharing this?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2195e23&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;To bounce ideas off of internet&lt;/li&gt;
&lt;li&gt;Hoping someone will point me in a better direction if there is one&lt;/li&gt;
&lt;li&gt;Hoping someone will solve some problems with this snippet, build on it until I
come around to do it myself&lt;/li&gt;
&lt;li&gt;To spread the cult of Emacs/org-mode (my precious-es)&lt;/li&gt;
&lt;li&gt;To have some activity on my blog. It is too quiet here&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><base href="https://bitspook.in"/></feed>