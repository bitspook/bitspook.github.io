<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>All Posts</title>
        <link>https://bitspook.in/</link>
        <generator>cl-ownpress</generator>
        <language>en-us</language>
        <image>
            <title>All Posts</title>
            <url>/images/avatar.png</url>
            <link>https://bitspook.in/</link>
        </image>
        <item>
            <title>How I manage my passwords</title>
            <link>https://bitspook.in/blog/how-i-manage-my-passwords</link>
            <description>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/faFJzaAjy0E&quot; title=&quot;tldr; video&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;div id=&quot;outline-container-orgbc0e84d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbc0e84d&quot;&gt;My requirements&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbc0e84d&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;No third-parties&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I don&apos;t want to put my trust in any third party. Be it Google/Mozilla (via
saved passwords in browser), or some dedicated password manager like KeyPass.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;b&gt;Simplicity&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Simple tools are easier to understand and bend to my will. It also means I&apos;ll
be able to intervene when something goes wrong.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;b&gt;Composability&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I should be able to make the tool a part of my forever changing workflow. It
should play nice with presence/absence of other tools.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org7272473&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7272473&quot;&gt;Tools I chose&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org7272473&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;http://www.passwordstore.org/&quot;&gt;Pass&lt;/a&gt; - &lt;i&gt;The simple password manager&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
I think it is as simple as it gets. A password-store in pass is a git repo
(so a directory) which contains gpg encrypted files. Each file represent one
set of credentials, and can contain all the plain-text, not just password and
username. E.g I often end up storing recovery codes for accounts in these.
&lt;/p&gt;

&lt;p&gt;
There are no third-parties involved, encryption happens on my machine, and I
can store my password store anywhere I want (e.g a private git repo on
github).
&lt;/p&gt;

&lt;p&gt;
Most pass operations are convenience wrappers on basic operations provided by
other tools; e.g &lt;code&gt;edit = decrypting a file + open it in an editor +
   re-encrypting + git-commit&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Pass has a whole ecosystem of tools written around it, which makes it an easy
choice considering how much work it saves me when integrating it in my
workflow.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;https://github.com/carnager/rofi-pass&quot;&gt;rofi-pass&lt;/a&gt; - &lt;i&gt;Rofi-based UI for pass for desktop&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/davatorium/rofi&quot;&gt;Rofi&lt;/a&gt; is a lightweight popup choice-selection UI, which has so far worked
out-of-the-box on all window-managers I have used. &lt;i&gt;rofi-pass&lt;/i&gt; extends rofi
with:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Ability to search and select credentials stored in pass&lt;/li&gt;
&lt;li&gt;Auto-fill credentials into any GUI app&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;https://github.com/bitspook/fireword&quot;&gt;fireword&lt;/a&gt; - &lt;i&gt;Converting easy-to-remember passwords to hard-to-crack ones&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
Not all credentials need to be saved. Occasionally I need to create
&lt;i&gt;throwaway&lt;/i&gt; accounts, for which I like to keep easy-to-guess (for me)
passwords. But I want even these password to be opaque (so analyzing them
wouldn&apos;t reveal a theme of my throwaway passwords).
&lt;/p&gt;

&lt;p&gt;
Fireword is a small script I wrote many years ago which create insane
passwords from any string. Even a single change of character in a string
creates wildly different output. So instead of passing a plain easy-to-guess
password, I give them to fireword and use its output.
&lt;/p&gt;

&lt;p&gt;
For example, &lt;code&gt;pass&lt;/code&gt; becomes &lt;code&gt;5B72?[30:F&lt;/code&gt; but &lt;code&gt;passs&lt;/code&gt; is &lt;code&gt;3Ec012aD5(&lt;/code&gt;.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;https://github.com/android-password-store/Android-Password-Store#readme&quot;&gt;Android Password Store&lt;/a&gt; - Android app for accessing pass
&lt;/p&gt;

&lt;p&gt;
Password store on android allows using the passwords I create/edit on my
desktop on my mobile and tablet. I use &lt;a href=&quot;https://syncthing.net/&quot;&gt;syncthing&lt;/a&gt; to sync my password store to
my mobile devices.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0649ca1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0649ca1&quot;&gt;Workflow&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0649ca1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org310dbcb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org310dbcb&quot;&gt;Add/edit/delete a password&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org310dbcb&quot;&gt;
&lt;p&gt;
For all these operations, I use the &lt;code&gt;pass&lt;/code&gt; cli. It is simple and intuitive, and
mostly just delegates to other Linux utilities. For example, deleting a password
for &lt;i&gt;my-acc&lt;/i&gt; account in &lt;i&gt;example.com&lt;/i&gt; is &lt;code&gt;pass rm example.com/my-acc&lt;/code&gt;; and
deleting all accounts in &lt;i&gt;example.com&lt;/i&gt; is &lt;code&gt;pass rm -r example.com&lt;/code&gt;.
&lt;/p&gt;

&lt;video autoplay loop&gt;
  &lt;source src=&quot;/videos/how-i-manage-my-passwords/1--pass-cli.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;

&lt;p&gt;
I used to use &lt;code&gt;pass generate&lt;/code&gt; for creating new passwords, which creates cryptic
hard (impossible?) to crack strings. Over time however, I have come to prefer
password phrases which are easy to type by hand. I pick 3-4 words that come to
my mind at a time, and make a loose sentence out of them to create a new
password. For example &lt;code&gt;libauvutilcelingfan&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9cffd71&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9cffd71&quot;&gt;Using a password&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org9cffd71&quot;&gt;
&lt;p&gt;
Using &lt;code&gt;pass&lt;/code&gt; CLI for using a password gets tedious quickly. Using a password is
much more common than adding/editing/deleting one. So I use &lt;i&gt;rofi-pass&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
It gives me a nice prompt to search and select the credentials I want, and
autofills them. It is smart enough to recognize that credentials are more than
just a password; so if you edit your password file to look like:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-text&quot;&gt;mypassword

user: myuser
some-other-key: some-val
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;i&gt;rofi-pass&lt;/i&gt; will allow you to select the key and auto-type its value. It
recognizes first line as the password, and a value with &lt;code&gt;user&lt;/code&gt; key to autotype
both username and password in forms which ask for first username and then
password (on the same form).
&lt;/p&gt;

&lt;video autoplay loop&gt;
  &lt;source src=&quot;/videos/how-i-manage-my-passwords/2--using-rofi-pass.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org77eec5a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org77eec5a&quot;&gt;Throwaway passwords&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org77eec5a&quot;&gt;
&lt;p&gt;
I don&apos;t &quot;install&quot; fireword since it is just a self-contained python script. But
because throwaway passwords, although temporary, tend to be entered frequently
(private browsing), I have created a small command in &lt;a href=&quot;https://github.com/bitspook/stumpwm.d&quot;&gt;my stumpwm configuration&lt;/a&gt;
to make it easy.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;spook/fireword-bin&lt;/span&gt; &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;~/Documents/work/fireword/fireword&quot;&lt;/span&gt;)

(defcommand fireword (pass len)
  ((&lt;span style=&quot;color: #DB6E8F;&quot;&gt;:password&lt;/span&gt; &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;Password: &quot;&lt;/span&gt;)
   (&lt;span style=&quot;color: #DB6E8F;&quot;&gt;:password&lt;/span&gt; &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;Length: &quot;&lt;/span&gt;))
  (run-shell-command (format nil  &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;~a ~a ~a | xclip -sel clip&quot;&lt;/span&gt; spook/fireword-bin pass len)))

(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;define-key&lt;/span&gt; *top-map* (kbd &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;s-P&quot;&lt;/span&gt;) &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;fireword&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
In the end I get a nice prompt on pressing &lt;code&gt;C-P&lt;/code&gt; to enter my password and
desired length, get the fireword copied to clipboard which I then paste in a
private browser window.
&lt;/p&gt;

&lt;video autoplay loop&gt;
  &lt;source src=&quot;/videos/how-i-manage-my-passwords/3-using-fireword-with-stumpwm.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>28c52ee9-bd59-4c4a-af1f-13652b3612dd</guid>
            <pubDate>2022-09-19T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Using ELisp as an HTML templating engine</title>
            <link>https://bitspook.in/blog/using-elisp-as-an</link>
            <description>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9Pcv5W1Gnvg&quot; title=&quot;TLDR Video&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
HTML templating engines like &lt;a href=&quot;https://jinja.palletsprojects.com/en/3.1.x/&quot;&gt;Jinja&lt;/a&gt; or &lt;a href=&quot;https://handlebarsjs.com/&quot;&gt;handlebars&lt;/a&gt; are commonly used in web
development for weaving data into HTML.
&lt;/p&gt;

&lt;p&gt;
For last couple of days, I&apos;ve been porting &lt;a href=&quot;https://github.com/bitspook/brandi&quot;&gt;my Hakyll based static-site generator&lt;/a&gt;
to &lt;a href=&quot;https://github.com/bitspook/press.el&quot;&gt;Emacs Lisp&lt;/a&gt;, for a more fluent thought-publishing workflow. I found myself in
need of an HTML templating engine so I could convert data about my blog posts
and notes to HTML.
&lt;/p&gt;

&lt;p&gt;
I found that we actually don&apos;t need an HTML templating engine to convert ELisp
to HTML. Emacs has built-in capability to work with HTML, we can piggy back on
that to get a templating engine without adding any new code.
&lt;/p&gt;

&lt;p&gt;
We can represent DOM, which is a tree data-structure, as a lisp form
&lt;/p&gt;

&lt;p&gt;
Consider following HTML element
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #F9B5AC;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color: #F9B5AC;&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;https://google.com&quot;&lt;/span&gt;&amp;gt;Google&amp;lt;/&lt;span style=&quot;color: #F9B5AC;&quot;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #F9B5AC;&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can write it as a lisp form like this:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;&apos;(div ((class . &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;container&quot;&lt;/span&gt;))
      (a ((href . &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;https://google.com&quot;&lt;/span&gt;))
         &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;Google&quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Note that this is a quoted lisp form. Which means this code isn&apos;t actually
executed, &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; aren&apos;t lisp functions. We can just put in any symbol
there, and it is treated as a DOM node.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;shr-dom-to-xml&lt;/code&gt; converts this lisp form to an HTML string:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;let&lt;/span&gt; ((my-url &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;https://google.com&quot;&lt;/span&gt;))
  (shr-dom-to-xml
   `(div ((class . &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;container&quot;&lt;/span&gt;))
         (a ((href . ,my-url))
            &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;Google&quot;&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
&amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;a href=&quot;https://google.com&quot;&amp;gt;Google&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
In this example we changed the quote used to showcase how we can run arbitrary
lisp forms in our DOM to weave data into it.
&lt;/p&gt;

&lt;p&gt;
You can check &lt;a href=&quot;https://github.com/bitspook/press.el&quot;&gt;my wip ELisp blogging setup&lt;/a&gt; for more complex examples, and some
glue code I&apos;ve written to make using ELisp as HTML templating engine easier.
&lt;/p&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>288bba3a-6385-47bf-b8ea-f832aeae28c2</guid>
            <pubDate>2022-04-08T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Using org-mode as an SQL playground</title>
            <link>https://bitspook.in/blog/using-org-mode-as-an-sql-playground</link>
            <description>&lt;p&gt;
Showcase video:
&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DY7t4T4TmUU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
For every web app I work on, a database client is always present for exploring
data and building complex queries. Recently, I have moved on from my PgAdmin to
org-mode for this purpose, because why not.
&lt;/p&gt;

&lt;p&gt;
Org-mode allows executing code snippets and can show results in a nice tabular
form. But org-mode isn&apos;t &lt;a href=&quot;https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-320/Microsoft-Office.html&quot;&gt;written by Microsoft&lt;/a&gt;. So it don&apos;t allow arbitrary code
execution without our explicit consent. To tell org-mode that it is okay to
execute SQL snippets, we need to run following elisp snippet:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;with-eval-after-load&lt;/span&gt; &apos;org
(org-babel-do-load-languages
 &apos;org-babel-load-languages
 &apos;((sql . t))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Org-mode has a number of &lt;a href=&quot;https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html#org7f0941b&quot;&gt;header arguments for SQL blocks&lt;/a&gt; which can be used to
configure how a particular SQL source-code snippet is executed. Most important
ones perhaps are:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;:engine&lt;/code&gt; which tells which database to run the SQL against&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dbhost&lt;/code&gt; to configure the database host, most likely &lt;code&gt;localhost&lt;/code&gt; for a dev
environment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dbport&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dbuser&lt;/code&gt; and &lt;code&gt;:dbpassword&lt;/code&gt; for database authentication&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:database&lt;/code&gt; for database name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
By default org-mode runs the code snippets in current OS environment. I use this
fact to get the ability to run SQL against our postgres database without passing
most of the above arguments. Postgres allows setting &lt;a href=&quot;https://www.postgresql.org/docs/current/libpq-envars.html&quot;&gt;some environment&lt;/a&gt; variables,
which it then use to for making connections by default. In my &lt;a href=&quot;https://github.com/bitspook/entropy/blob/ae5ee52646c2c67ce713938548d67a722b73a294/flake.nix&quot;&gt;flake.nix&lt;/a&gt; file, I
setup the required environment variables:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #c6797e;&quot;&gt;PGDIR&lt;/span&gt;=$&lt;span style=&quot;color: #c6797e;&quot;&gt;PWD&lt;/span&gt;/storage/postgres
&lt;span style=&quot;color: #DB6E8F;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;PGDATA&lt;/span&gt;=$&lt;span style=&quot;color: #c6797e;&quot;&gt;PGDIR&lt;/span&gt;/data
&lt;span style=&quot;color: #DB6E8F;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;PGHOST&lt;/span&gt;=$&lt;span style=&quot;color: #c6797e;&quot;&gt;PGDIR&lt;/span&gt;/run
&lt;span style=&quot;color: #DB6E8F;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;PGDATABASE&lt;/span&gt;=entropy
&lt;span style=&quot;color: #DB6E8F;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;DATABASE_URL&lt;/span&gt;=&lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;postgresql:///$PGDATABASE?host=$PGHOST&quot;&lt;/span&gt; &lt;span style=&quot;color: #64727d; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #64727d; font-style: italic;&quot;&gt;not required by postgres, but will be helpful&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
With this, only header option left to set is &lt;code&gt;:engine&lt;/code&gt;, which I prefer to
configure globally for my &lt;a href=&quot;https://raw.githubusercontent.com/bitspook/entropy/96cc9c0485d972ed819996d61c3730cafb228660/sql-playground.org&quot;&gt;sql-playground.org&lt;/a&gt; since I usually have one database
for my personal projects. You can check this &lt;a href=&quot;https://github.com/bitspook/entropy/commit/96cc9c0485d972ed819996d61c3730cafb228660&quot;&gt;commit on Entropy project&lt;/a&gt; for how I
have setup my sql-playground there. Following snippet on top of the
sql-playground.org does the trick:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #A3B09A;&quot;&gt;#+PROPERTY: header-args:sql  :engine postgres&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now any SQL snippets that we create can be executed against our development
database right within the org file. For example, pressing &lt;code&gt;C-c C-c&lt;/code&gt; in following
SQL block produces output shown below that.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #A3B09A;&quot;&gt;#+name: events&lt;/span&gt;
&lt;span style=&quot;color: #64727d; background-color: #1F2A3F;&quot;&gt;#+begin_src sql&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #b18bb1; background-color: #1F2A3F; font-style: italic;&quot;&gt;SELECT&lt;/span&gt;&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt; events.title,&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;         events.slug,&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;         start_time,&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;         events.id,&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;         events.&lt;/span&gt;&lt;span style=&quot;color: #b18bb1; background-color: #1F2A3F; font-style: italic;&quot;&gt;source&lt;/span&gt;&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;,&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;         format(&lt;/span&gt;&lt;span style=&quot;color: #A3B09A; background-color: #1F2A3F;&quot;&gt;&apos;%s mins&apos;&lt;/span&gt;&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #DB6E8F; background-color: #1F2A3F;&quot;&gt;extract&lt;/span&gt;&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;(epoch &lt;/span&gt;&lt;span style=&quot;color: #b18bb1; background-color: #1F2A3F; font-style: italic;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt; (events.end_time - events.start_time))/60)&lt;/span&gt;
&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #b18bb1; background-color: #1F2A3F; font-style: italic;&quot;&gt;FROM&lt;/span&gt;&lt;span style=&quot;background-color: #1F2A3F;&quot;&gt; events;&lt;/span&gt;
&lt;span style=&quot;color: #64727d; background-color: #1F2A3F;&quot;&gt;#+end_src&lt;/span&gt;

&lt;span style=&quot;color: #A3B09A;&quot;&gt;#+RESULTS: events&lt;/span&gt;
&lt;span style=&quot;color: #5D80AE;&quot;&gt;| title              | slug                 | start_time          | end_time            | source | format  |&lt;/span&gt;
&lt;span style=&quot;color: #5D80AE;&quot;&gt;|--------------------+----------------------+---------------------+---------------------+--------+---------|&lt;/span&gt;
&lt;span style=&quot;color: #5D80AE;&quot;&gt;| Lol bro what       | lol-rofl-lmao        | 2021-11-29 12:30:00 | 2021-11-29 13:30:00 | local  | 60 mins |&lt;/span&gt;
&lt;span style=&quot;color: #5D80AE;&quot;&gt;| Nested event title | nested-lol-rofl-lmao | 2021-10-29 12:30:00 | 2021-10-29 13:30:00 | local  | 60 mins |&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org258699f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org258699f&quot;&gt;Utilizing LSP&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org258699f&quot;&gt;
&lt;p&gt;
Building SQL queries is my primary use-case, and org-mode configured so far
serves that purpose. But since I am putting all this effort in writing this blog
post anyway, I thought let&apos;s go a step further and try configuring LSP mode for
SQL snippets in my org file. To my surprise, it is possible. &lt;a href=&quot;https://github.com/lighttiger2505/sqls/&quot;&gt;SQLS&lt;/a&gt; provides an
LSP server for SQL files, which once configured can provide certain features
like auto-completing table and column names. I have created a &lt;a href=&quot;https://github.com/bitspook/entropy/blob/96cc9c0485d972ed819996d61c3730cafb228660/.dir-locals.el&quot;&gt;.dir-locals&lt;/a&gt; file
for &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html&quot;&gt;adding directory local variables&lt;/a&gt; to configure LSP to connect to correct
database.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;((nil . ((eval (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;lambda&lt;/span&gt; ()
                 (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;setq&lt;/span&gt; lsp-sqls-connections `(((driver . &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;postgresql&quot;&lt;/span&gt;)
                                               (dataSourceName . ,(getenv &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;DATABASE_URL&quot;&lt;/span&gt;))))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This snippet isn&apos;t actually the right way configuring directory local variables,
becuase it sets &lt;code&gt;lsp-sqls-connections&lt;/code&gt; globally. This is the result of me
time-boxing the task of evaluating &lt;code&gt;(getenv &quot;DATABASE_URL&quot;)&lt;/code&gt;, so I won&apos;t need to
duplicate my database configuration here.
&lt;/p&gt;

&lt;p&gt;
LSP for org-mode also need to provide a file to which it can tangle source
blocks. So I added another snippet to top of my org file.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #A3B09A;&quot;&gt;#+PROPERTY: header-args:sql  :tangle test.sql&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I can now run &lt;code&gt;lsp-org&lt;/code&gt; in an SQL block, and 8/10 times it has lsp configured
properly. It isn&apos;t flawless though, but that is expected since &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/manual-language-docs/lsp-org/#&quot;&gt;lsp support in
org-snippets&lt;/a&gt; is in alpha stage right now.
&lt;/p&gt;

&lt;p&gt;
I also tried setting up lsp support in edit buffer for SQL statements (which you
get by pressing &lt;code&gt;C-c &apos;&lt;/code&gt; in org src blocks), but because of a &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/issues/2525&quot;&gt;bug in lsp-mode&lt;/a&gt;,
that didn&apos;t work out too well.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #F9B5AC;&quot;&gt;org-babel-edit-prep:sql&lt;/span&gt; (babel-info)
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;setq-local&lt;/span&gt; buffer-file-name (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; babel-info caddr (alist-get &lt;span style=&quot;color: #DB6E8F;&quot;&gt;:tangle&lt;/span&gt;)))
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;setq-local&lt;/span&gt; lsp-buffer-uri (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; babel-info caddr (alist-get &lt;span style=&quot;color: #DB6E8F;&quot;&gt;:tangle&lt;/span&gt;) lsp--path-to-uri))
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;setq-local&lt;/span&gt; lsp-headerline-breadcrumb-enable nil)
  (lsp))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgac35f1f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgac35f1f&quot;&gt;Problems with this setup&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgac35f1f&quot;&gt;
&lt;p&gt;
There are 2 main problems I face during my primary use-case.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Org tables don&apos;t work well if a column has a lot of data. e.g &lt;code&gt;description&lt;/code&gt;
of an &lt;code&gt;event&lt;/code&gt; messes up the table real bad. lsp-mode allow executing queries
which don&apos;t suffer from this.&lt;/li&gt;
&lt;li&gt;No LSP support in edit buffer is a major bummer.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>803de13c-0598-49f1-979b-fa66194528e9</guid>
            <pubDate>2022-02-03T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Using org-roam as a CRM</title>
            <link>https://bitspook.in/blog/using-org-roam-as-a-crm</link>
            <description>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DteN5uBV5ts&quot; title=&quot;TLDR video&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;
org-roam is an Emacs application which makes efficiently capturing and finding
notes easy. It does so a good job at that, I decided to use it as a makeshift
personal CRM. With a few lines of Elisp, I get to:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
Take notes about people and events. I usually capture their contact
information, important dates, how they made me feel during our interactions.
Documenting meetings and calls has proven to be very helpful on more than one
occasion.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;SPC P f&lt;/code&gt; to very quickly find or create a person/event.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Link events and people to build a graph of relationships, which provide
context and help me remember our meetings vividly. It is valuable for me
because it save me from anxiety about forgetting people and things I discuss
with them.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;SPC P i&lt;/code&gt; to insert link to a person/event in an org file (mostly my diary).
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I have similar keybindings for taking (&lt;code&gt;SPC n f&lt;/code&gt;) and inserting notes (&lt;code&gt;SPC n
i&lt;/code&gt;), so it builds into a nice theme for easy-to-remember keybindings and
consistent UI.
&lt;/p&gt;

&lt;div id=&quot;outline-container-org2ee70f6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2ee70f6&quot;&gt;Setup&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2ee70f6&quot;&gt;
&lt;p&gt;
Elisp I use org-roam as a CRM, while keeping &quot;normal&quot; org-roam available for
taking notes.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #c6797e;&quot;&gt;spook--org-roam-crm-dir&lt;/span&gt; &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;~/Documents/org/people&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #A3B09A; font-style: italic;&quot;&gt;&quot;Directory where org-roam notes related to people are kept.&quot;&lt;/span&gt;)

(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #F9B5AC;&quot;&gt;spook--with-org-roam-crm&lt;/span&gt; (func &lt;span style=&quot;color: #c6797e;&quot;&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style=&quot;color: #A3B09A; font-style: italic;&quot;&gt;&quot;Evaluate FUNC with ARGS org-roam set for working as CRM.&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;let*&lt;/span&gt; ((org-roam-directory spook--org-roam-crm-dir)
         (org-roam-db-location (concat org-roam-directory &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;/roam.db&quot;&lt;/span&gt;)))
    (apply func args)))

(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #F9B5AC;&quot;&gt;spook-crm--db-sync&lt;/span&gt; ()
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;interactive&lt;/span&gt;)
  (spook--with-org-roam-crm #&apos;org-roam-db-sync))

(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #F9B5AC;&quot;&gt;spook-crm--find-person&lt;/span&gt; ()
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;interactive&lt;/span&gt;)
  (spook--with-org-roam-crm #&apos;org-roam-node-find))

(&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #F9B5AC;&quot;&gt;spook-crm--insert-person&lt;/span&gt; ()
  (&lt;span style=&quot;color: #b18bb1; font-style: italic;&quot;&gt;interactive&lt;/span&gt;)
  (spook--with-org-roam-crm #&apos;org-roam-node-insert))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Setup keybindings for calling &lt;code&gt;spook-crm--find-person&lt;/code&gt; to quickly search for
(and/or add) a person or event, and &lt;code&gt;spook-crm--insert-person&lt;/code&gt; to add a link to
a person or event in any org-mode buffer. I frequently use it when adding
meeting notes and in my diary.
&lt;/p&gt;

&lt;p&gt;
Here&apos;s how I add the keybindings:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-elisp&quot;&gt;(spook-defkeymap
 &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;spook-people&quot;&lt;/span&gt; &lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;C-c P&quot;&lt;/span&gt;
 &apos;(&lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;f&quot;&lt;/span&gt; . spook-crm--find-person)
 &apos;(&lt;span style=&quot;color: #A3B09A;&quot;&gt;&quot;i&quot;&lt;/span&gt; . spook-crm--insert-person))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can find source of my very naive &lt;code&gt;spook-defkeymap&lt;/code&gt; macro in my &lt;a href=&quot;https://github.com/bitspook/spookmax.d/blob/master/readme.org#helper-utilities&quot;&gt;Emacs
configuration&lt;/a&gt;. In addition to this, I assign the &lt;code&gt;spook-people&lt;/code&gt; keymap to my
&lt;a href=&quot;https://github.com/meow-edit/meow/&quot;&gt;meow&lt;/a&gt; leader key, means I can press &lt;code&gt;SPC P f&lt;/code&gt; to find a person/event, and &lt;code&gt;SPC P
i&lt;/code&gt; to insert a link to a person/event.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-orgad8a7b5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgad8a7b5&quot;&gt;Does it solve everything?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgad8a7b5&quot;&gt;
&lt;p&gt;
No. But it is the quickest solution which achieves satisfactory result and free
me up to focus on other things. I feel org-roam itself to be over-engineered
sometimes, and there are a bunch of things I might like but don&apos;t need right
now. e.g
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;More structured way of capturing specific kind of information. e.g contact
details. Structure of data kept in org files is upto me, which works for now&lt;/li&gt;
&lt;li&gt;Searching by something which isn&apos;t title or tags. This is solved by doing grep
over&lt;/li&gt;
&lt;li&gt;Visualize the people and events I participate in. &lt;a href=&quot;https://github.com/org-roam/org-roam-ui&quot;&gt;org-roam-ui&lt;/a&gt; didn&apos;t work on
first shot.&lt;/li&gt;
&lt;li&gt;Contacts/details on the go i.e a mobile app&lt;/li&gt;
&lt;li&gt;Psychoanalyze people I meet; building, tracking and concluding experiments.
But it is perhaps too much to ask without making effort&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd413dcc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd413dcc&quot;&gt;Why am I sharing this?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd413dcc&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;To bounce ideas off of internet&lt;/li&gt;
&lt;li&gt;Hoping someone will point me in a better direction if there is one&lt;/li&gt;
&lt;li&gt;Hoping someone will solve some problems with this snippet, build on it until I
come around to do it myself&lt;/li&gt;
&lt;li&gt;To spread the cult of Emacs/org-mode (my precious-es)&lt;/li&gt;
&lt;li&gt;To have some activity on my blog. It is too quiet here&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>f36bb804-0ae3-4d16-b1ce-392e489007ae</guid>
            <pubDate>2022-01-22T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Find a functional programmer for your Javascript team</title>
            <link>https://bitspook.in/blog/find-a-functional-programmer-for-your-javascript-team</link>
            <description>&lt;blockquote&gt;
&lt;p&gt;
Written below are some opinions and rationalizations for them. I have come to
these opinions by interviewing and working with people for years. However
strongly I feel about them, they can still be wrong. If you have feedback for
these, please do contact me on &lt;a href=&quot;https://www.linkedin.com/in/bitspook&quot;&gt;LinkedIn&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/bitspook&quot;&gt;Twitter&lt;/a&gt;. All kind of feedback is
very much appreciated.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
From &quot;Functional programmer&quot; I mean a programmer familiar with concepts of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
A good teammate is someone:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;b&gt;Who takes care of themselves&lt;/b&gt;. They invest in themselves. They care
about their software as a craft, as something more than just cramming
a whole bunch of frameworks and libraries.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Who take care of their teammates&lt;/b&gt;.

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;They help their teammates grow, by mentoring and/or by serving as
an example&lt;/li&gt;
&lt;li&gt;They are empathetic towards other developers. This is most visible
in kind of code a person writes. An empathetic developer writes
code for other people.

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;They give preference to readability of code over
micro-optimizations that make them feel clever&lt;/li&gt;
&lt;li&gt;They write modular code with independent modules each of which do
one thing well. And are easily composed to build more complex
functionality.&lt;/li&gt;
&lt;li&gt;They write clean, predictable and intuitive APIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
FP is steadily gaining popularity, but it is still not popular enough to
breach the talent pool I get to interview from. Familiarity with FP is a
very good indication that the person invest in themselves. And they do
that in a manner which goes beyond just increasing the number of
&quot;frameworks&quot; they have built a Todo App in.
&lt;/p&gt;

&lt;p&gt;
Developer empathy is surprisingly rare. In almost a decade of writing
code, I have met so few developers who really give a fuck that someone
else will also read their abomination. Most software is written in
vacuum. Familiarity with FP don&apos;t fix that magically.
&lt;/p&gt;

&lt;p&gt;
However there is another factor at play here. Ironically, as a
side-effect of FP, code written in a functional manner is often a lot
more readable than its imperative and OOP equivalents (Impromptu quiz:
What&apos;s so ironic about this statement?). Not only is functional code
itself naturally declarative, an FP person is more likely to wtf when
they see unreadable code in PR reviews.
&lt;/p&gt;

&lt;p&gt;
Basic principles of FP also make for great advice for inexperienced
developers. Good software architecture is hard to learn, it is a lot
harder to teach. You need a mind capable of holding large amounts of
complex code before the fancy design patterns even start making sense.
In comparison, &quot;pure functions + composition&quot; and you are good to go.
That is it. That is all you need to know to get started with writing
modular, testable, simple code; which is easy to write and easier to
maintain. As a mere side effect of avoiding side effects, you write
naturally &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt; (in spirit)
code.
&lt;/p&gt;

&lt;p&gt;
FP is not a silver bullet, but looking for functional programmers skew
the universe in your favor a little. You are a lot more likely to get
good people among functional programmers.
&lt;/p&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>find-a-functional-programmer-for-your-javascript-team</guid>
            <pubDate>2020-11-07T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Microservices</title>
            <link>https://bitspook.in/talks/microservices-techblend</link>
            <description>&lt;p&gt;
I recently joined a Whatsapp group named &quot;Tech Blend&quot;, which conduct
weekly online meetups. Topic for last meetup was &quot;Microservices&quot;, for
which I volunteered. Since I was working for around 2 years on a
microservices based project of decent complexity, I thought it would be
fun to talk about my experience.
&lt;/p&gt;

&lt;p&gt;
The meetup was fun. I ran out of time. The meetup is quite well managed.
Manpreet, the guy who organizes the meetup does a very good job
respecting everyone&apos;s time while managing to have meaningful discussions
at the same time. Their topics/talks are usually quite shallow, but this
event management is something I can learn from participating in this
group.
&lt;/p&gt;

&lt;p&gt;
Here are the slides for I created for the meetup. I was holding on to
them hoping I&apos;ll create a video, but that&apos;s not happening. So I am just
putting the slides over here.
&lt;/p&gt;

&lt;p&gt;
Feel free to hit me up if you need some help regarding microservices, or
if you need me to explain some slide, or just for a chat.
&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/bitspook/microservices/embed?style=light&quot; width=&quot;100%&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
</description>
            <author>Charanjit Singh</author>
            <category>talks</category>
            <guid>microservices-techblend</guid>
            <pubDate>2020-08-06T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Personal Brands for Software Developers (Talk)</title>
            <link>https://bitspook.in/talks/personal-brands-for-software-developers-talk</link>
            <description>&lt;p&gt;
After long diligence, me and my old (Trantor) team decided to organize a meetup
to showcase our efforts, and to share our ideas with the local community. &lt;a href=&quot;https://www.meetup.com/Chandigarh-Programmers-Club/events/263862634/&quot;&gt;The
meetup&lt;/a&gt; was organized in Trantor on September 18, 2019.
&lt;/p&gt;

&lt;p&gt;
It was a collaborative talk given in 3 parts be me, Ayush Sharma, and
Sheenam Narula. Attendance was very low, but that&apos;s usually how it is in
Tricity. Overall it was a fun session with lengthy, and mostly fruitful
discussions.
&lt;/p&gt;

&lt;p&gt;
Here&apos;s my set of slides from the talk:
&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/bitspook/personal-brands-for-software-developers/embed?style=light&quot; width=&quot;100%&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
</description>
            <author>Charanjit Singh</author>
            <category>talks</category>
            <guid>personal-brands-for-software-developers-talk</guid>
            <pubDate>2019-10-21T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Quick and Pretty Docs for Software Projects</title>
            <link>https://bitspook.in/blog/quick-and-pretty-docs-for-software-projects</link>
            <description>&lt;p&gt;
I have practiced
&lt;a href=&quot;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;Readme
Driven Development&lt;/a&gt; on a number of my projects with varying milage. I
have often found myself wishing for a few things:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;b&gt;More structure&lt;/b&gt; When writing the documentation, and even more so
when reading it. A single markdown file starts getting out of hand
really quickly. On my presonal projects I go for org-mode, which keep
me satisfied. But when working on a professional gig, it don&apos;t feel
right to force other developers into org-mode/emacs.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Prettiness&lt;/b&gt; Markdown is a quite reasonably readable format, but
there is always room for prettyness.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Basically I wish for github-pages with more structure; so, a statically
generate site.
&lt;/p&gt;

&lt;p&gt;
To minimize the added complexity to our dev setup, and since I am
already using docker to run dev-environments for almost all of my
projects, I chose to leverage it for building my readme as a local
&quot;service&quot;. i.e I chose to structure my documentation with filesystem,
and use docker to abstract the complexity of setting up the static site
generator.
&lt;/p&gt;

&lt;p&gt;
I have chosen hugo because of its simplicity. Its intuitive content
management means near-zero learning curve for my teammates to start
contributing documentation. I chose
&lt;a href=&quot;https://github.com/matcornic/hugo-theme-learn&quot;&gt;hugo-theme-learn&lt;/a&gt;
because of its simplicity, &lt;a href=&quot;https://mermaidjs.github.io/&quot;&gt;mermaid.js&lt;/a&gt;
support for UML diagrams, and well, prettiness.
&lt;/p&gt;

&lt;p&gt;
I have a directory named &lt;code&gt;docs&lt;/code&gt; in our repository, with following
general structure:
&lt;/p&gt;

&lt;pre class=&quot;example&quot; id=&quot;orgf54e61e&quot;&gt;
.
├── config.toml
├── content
└── Dockerfile
&lt;/pre&gt;

&lt;p&gt;
Every markdown file in &lt;code&gt;content&lt;/code&gt; directory adds to the generated
documentation.
&lt;/p&gt;

&lt;p&gt;
Here is the Dockerfile I have used to create the docs container. It
downloads and sets up hugo with the theme in a single command without
anything other than docker installed on a developer&apos;s machine.
&lt;/p&gt;

&lt;pre class=&quot;example&quot; id=&quot;orgb08dc1a&quot;&gt;
FROM alpine:latest

WORKDIR /app

EXPOSE 80
ENV HOST=0.0.0.0

RUN apk update &amp;amp;&amp;amp; apk add hugo git

ENV HUGO_THEME_URL=&apos;https://github.com/matcornic/hugo-theme-learn&apos;
ENV HUGO_THEME_COMMIT=&apos;2.4.0&apos;

RUN mkdir -p /themes/current \
  &amp;amp;&amp;amp; cd /themes/current \
  &amp;amp;&amp;amp; git init \
  &amp;amp;&amp;amp; git remote add origin $HUGO_THEME_URL \
  &amp;amp;&amp;amp; git fetch --depth 1 origin $HUGO_THEME_COMMIT \
  &amp;amp;&amp;amp; git checkout FETCH_HEAD \
  &amp;amp;&amp;amp; cd /app
RUN echo &quot;alias hugo=&apos;hugo --themesDir /themes --theme current&apos;&quot; &amp;gt; ~/.profile

COPY . /app

CMD hugo serve --port 3000 --bind=&apos;0.0.0.0&apos; --themesDir /themes --theme current
&lt;/pre&gt;

&lt;p&gt;
When exposed on port &lt;code&gt;3000&lt;/code&gt;, it allows live-reloading of docs and search
in docs as well. It is possible to change the theme and theme version by
setting environment variables &lt;code&gt;HUGO_THEME_URL&lt;/code&gt; and &lt;code&gt;HUGO_THEME_COMMIT&lt;/code&gt;
when building the docker image.
&lt;/p&gt;

&lt;p&gt;
Here is &lt;code&gt;config.toml&lt;/code&gt; file I&apos;ve used for my &lt;code&gt;docs&lt;/code&gt;, which allow me to
configure the hugo theme with above mentioned environment variable only:
&lt;/p&gt;

&lt;pre class=&quot;example&quot; id=&quot;orgb0bf0dc&quot;&gt;
buildDrafts = true
title = &quot;My Project&quot;

# For search functionality
[outputs]
home = [ &quot;HTML&quot;, &quot;RSS&quot;, &quot;JSON&quot;]

[params]
  author = &quot;My team&quot;
  description = &quot;My project&apos;s cloud&quot;
&lt;/pre&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>quick-and-pretty-docs-for-software-projects</guid>
            <pubDate>2019-08-28T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Secure Software Teams Trantor</title>
            <link>https://bitspook.in/talks/secure-software-teams-trantor</link>
            <description>&lt;iframe src=&quot;//slides.com/bitspook/secure-software-teams/embed?style=light&quot; width=&quot;100%&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;
I gave this talk in one of internal sessions at Trantor. Goal was to
acquaint one of our software teams into the world of application
security. This was a basic talk, just to familiarize attendees with
basic information security concepts. I leveraged this opportunity to
propose setting up a Red Team in Trantor.
&lt;/p&gt;

&lt;p&gt;
As practical part of this session, I created a docker based virtual lab
with webgoat set up. During the session we went through some of the
exercises, rest were left for the attendees as homework. Here&apos;s the
&lt;code&gt;docker-compose.yml&lt;/code&gt; file that was used in the session.
&lt;/p&gt;

&lt;pre class=&quot;example&quot; id=&quot;org55a4f6c&quot;&gt;
version: &apos;3&apos;
services:
  webgoat:
    image: webgoat/webgoat-8.0
    environment:
      - WEBWOLF_HOST=webwolf
      - WEBWOLF_PORT=9090
    ports:
      - &quot;8080:8080&quot;
      - &quot;9001:9001&quot;
    volumes:
      - ./docker-volumes/webgoat-home:/home/webgoat/.webgoat
  webwolf:
    image: webgoat/webwolf
    ports:
      - &quot;9090:9090&quot;
    command: --spring.datasource.url=jdbc:hsqldb:hsql://webgoat:9001/webgoat --server.address=0.0.0.0
&lt;/pre&gt;

&lt;p&gt;
To start the lab, simply create a directory, save above snippet as
&lt;code&gt;docker-compose.yml&lt;/code&gt;, and run &lt;code&gt;docker-compose up&lt;/code&gt; in it. You will then
be able to access webgoat on &lt;a href=&quot;http://localhost:8080/WebGoat&quot;&gt;http://localhost:8080/WebGoat&lt;/a&gt;
&lt;/p&gt;
</description>
            <author>Charanjit Singh</author>
            <category>talks</category>
            <guid>secure-software-teams-trantor</guid>
            <pubDate>2019-08-26T05:30:00.000000+05:30</pubDate>
        </item>
        <item>
            <title>Helping others to help myself</title>
            <link>https://bitspook.in/blog/coming-to-terms-with-adhd-help-others-to-help-yourself</link>
            <description>&lt;p&gt;
It is near impossible for me to get something done if I don&apos;t have 100%
peaked interest in it at &lt;b&gt;this&lt;/b&gt; very moment. Occasionally I can hyper
focus on things, but that hyper focus rarely finish things. Hyper focus
is like eating all the desert, leaving behind a plate full of broccoli.
&lt;/p&gt;

&lt;p&gt;
I have noticed however that most of the times when I have actually
finished something, I was, in my mind, helping someone else.
&lt;/p&gt;

&lt;p&gt;
Reviewing the judicious documentation of my life, that is my journal, I
can say it for near about 100% of the things that I actually finished.
The force behind crossing the finishing line was either accountability,
or my belief that someone else is relying on me.
&lt;/p&gt;

&lt;p&gt;
None of my own &quot;side projects&quot; have ever seen a ray of light, but most
things I started for others were finished. Mostly that was
presentations, processes, and very personally tailored learning
materials.
&lt;/p&gt;

&lt;p&gt;
Reviewing my journal, I noticed a pattern developing over the course of
last year. Whenever I had an idea that I wanted to see done, I tried to
frame it in somebody else&apos; canvas. If I could do that, I shared the idea
with the person and got them involved as a partner. Chances of success
I&apos;ve observed were directly proportional to how much I care for the
person. Some of the things I started that I couldn&apos;t fit in to help
someone else are still in &quot;TODO&quot; state, despite the long and clear
road-maps I created for them.
&lt;/p&gt;

&lt;p&gt;
This discovery of transforming emotions that come easily to me, into
what I believe I severely lack has sown seeds of new hope. Perhaps I
will be able to replace my need of accountability to get things done
with this. I don&apos;t know if it is vain need of acknowledgment, or
goodness of heart, but it works.
&lt;/p&gt;

&lt;p&gt;
I have started taking actions to optimize this. I am as anti-social as
they come, and that, now I believe, is a problem to be solved if I want
to increase my happiness.
&lt;/p&gt;

&lt;p&gt;
Most of my activities with other people don&apos;t register to my brain as
something it should remember. My mind is often meeting people for first
time despite several previous encounters. That is the first thing I am
going to tackle. Concrete step I am taking for this, is to start using
&lt;a href=&quot;https://github.com/monicahq/monica/&quot;&gt;Monica&lt;/a&gt; to keep track of my
social life. Next step would be to actually start making effort to
socialize. I suppose saying &quot;hello&quot; to my colleagues every morning could
be a good start.
&lt;/p&gt;
</description>
            <author>Charanjit Singh</author>
            <category>blog</category>
            <guid>coming-to-terms-with-adhd-help-others-to-help-yourself</guid>
            <pubDate>2019-05-13T05:30:00.000000+05:30</pubDate>
        </item>
    </channel>
</rss>